name: Release and Build Docker Image
permissions:
  contents: read

on:
  push:
    tags:
      - "*" # Triggers on tags
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      tag:
        description: "Tag to release"
        required: true
        default: "latest"
  release:
    types: [published]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant:
          - name: "CPU"
            stub: ""
            dockerfile: cpu.Dockerfile
          - name: "GPU"
            stub: "-gpu"
            dockerfile: gpu.Dockerfile

    permissions:
      actions: write # required by actions/cache to save new entries
      packages: write # required by docker/build-push-action to push images to GitHub Container Registry

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@6c439dc8bdf85cadbbce9ed30d1c7b959517bc49 # v2.12.2
        with:
          egress-policy: audit

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: vars
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            TAG=${GITHUB_REF#refs/tags/}
            echo "tag=${TAG}" >> $GITHUB_OUTPUT
          fi
          echo "repo_lowercase=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Cache uv cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Set build timestamp
        id: build_ts
        run: echo "BUILD_TS=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> "$GITHUB_ENV"

      - name: Build and push Docker image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./${{ matrix.variant.dockerfile }}
          push: true
          tags: |
            ghcr.io/${{ steps.vars.outputs.repo_lowercase }}${{ matrix.variant.stub }}:${{ steps.vars.outputs.tag }}
            ${{ steps.vars.outputs.tag != 'latest' && format('ghcr.io/{0}{1}:latest', steps.vars.outputs.repo_lowercase, matrix.variant.stub) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            IMAGE_CREATED=${{ github.event.repository.pushed_at || env.BUILD_TS }}
            IMAGE_REVISION=${{ github.sha }}
            IMAGE_VERSION=${{ steps.vars.outputs.tag }}

      - name: Image digest
        run: |
          echo "Image built and pushed: ghcr.io/${{ github.repository }}${{ matrix.variant.stub }}:${{ steps.vars.outputs.tag }} (${{ matrix.variant.name }})"
